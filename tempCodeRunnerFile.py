import customtkinter
from tkinter import filedialog, messagebox
import google.generativeai as genai
from PIL import Image, ImageTk
import os
import threading
import json
import re
import pyodbc
from typing import Dict, Optional, Tuple

# --- C·∫•u h√¨nh API v√† Database ---
# Vui l√≤ng thay th·∫ø c√°c th√¥ng tin b√™n d∆∞·ªõi b·∫±ng th√¥ng tin c·ªßa b·∫°n
API_KEY = "AIzaSyAYgvAsQCU2zmRGo4xTYz_-2rxSzlHDIF4"
SQL_SERVER = "WILLIAMS22-01\\DHV"
SQL_DATABASE = "TextExtractorDB"
SQL_USER = "Admin"
SQL_PASSWORD = "123456"

# Chu·ªói k·∫øt n·ªëi ƒë·∫øn SQL Server
CONNECTION_STRING = (
    f"DRIVER={{ODBC Driver 17 for SQL Server}};"
    f"SERVER={SQL_SERVER};"
    f"DATABASE={SQL_DATABASE};"
    f"UID={SQL_USER};"
    f"PWD={SQL_PASSWORD};"
)

# Th∆∞ m·ª•c ƒë·ªÉ l∆∞u tr·ªØ c√°c file ·∫£nh ch·ªØ k√Ω
SIGNATURES_DIR = "signatures"
if not os.path.exists(SIGNATURES_DIR):
    os.makedirs(SIGNATURES_DIR)


# --- H√†m x·ª≠ l√Ω API ƒë√£ ƒë∆∞·ª£c c·∫£i thi·ªán (ƒê√£ c·∫≠p nh·∫≠t) ---
def get_image_data(image_path):
    """
    S·ª≠ d·ª•ng Google Gemini API ƒë·ªÉ tr√≠ch xu·∫•t vƒÉn b·∫£n, th√¥ng tin ch·ªØ k√Ω v√† t·ªça ƒë·ªô.
    Tr·∫£ v·ªÅ m·ªôt ƒë·ªëi t∆∞·ª£ng JSON string ch·ª©a c√°c th√¥ng tin c·ª• th·ªÉ.
    """
    try:
        if not API_KEY or "AIzaSy" not in API_KEY:
            raise ValueError("API Key kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i.")

        genai.configure(api_key=API_KEY)
        model = genai.GenerativeModel("gemini-2.5-flash")
        img = Image.open(image_path)

        prompt = """Tr√≠ch xu·∫•t c√°c th√¥ng tin sau t·ª´ vƒÉn b·∫£n trong h√¨nh ·∫£nh:
- H·ªç t√™n c·ªßa sinh vi√™n.
- T√™n ƒë·∫ßy ƒë·ªß c·ªßa quy·∫øt ƒë·ªãnh (v√≠ d·ª•: "QUY·∫æT ƒê·ªäNH V·ªÄ VI·ªÜC CHUY·ªÇN NG√ÄNH H·ªåC").
- T√™n c·ªßa ng∆∞·ªùi k√Ω quy·∫øt ƒë·ªãnh.
- M·ªôt danh s√°ch c√°c ƒëi·ªÅu, kho·∫£n ho·∫∑c quy·∫øt ƒë·ªãnh c·ª• th·ªÉ ƒë∆∞·ª£c li·ªát k√™ trong vƒÉn b·∫£n.
- M·ªôt m√¥ t·∫£ ng·∫Øn v·ªÅ ch·ªØ k√Ω.
- T·ªça ƒë·ªô khung ch·ªØ nh·∫≠t (bounding box) c·ªßa ch·ªØ k√Ω d∆∞·ªõi d·∫°ng [x_min, y_min, x_max, y_max].

**Quy t·∫Øc:**
1. Tr√≠ch xu·∫•t c√°c th√¥ng tin sau: H·ªç t√™n sinh vi√™n, t√™n ƒë·∫ßy ƒë·ªß c·ªßa quy·∫øt ƒë·ªãnh, t√™n ng∆∞·ªùi k√Ω v√† danh s√°ch c√°c ƒëi·ªÅu kho·∫£n.
2. T√¨m ki·∫øm ch·ªØ k√Ω c·ªßa ng∆∞·ªùi k√Ω. Ch·ªØ k√Ω th∆∞·ªùng n·∫±m g·∫ßn t√™n ng∆∞·ªùi k√Ω, ·ªü cu·ªëi t√†i li·ªáu v√† c√≥ th·ªÉ l√† ch·ªØ vi·∫øt tay ho·∫∑c con d·∫•u.
3. Cung c·∫•p m·ªôt m√¥ t·∫£ ng·∫Øn g·ªçn v·ªÅ ch·ªØ k√Ω.
4. Cung c·∫•p t·ªça ƒë·ªô khung ch·ªØ nh·∫≠t (bounding box) c·ªßa ch·ªØ k√Ω d∆∞·ªõi d·∫°ng [x_min, y_min, x_max, y_max]. T·ªça ƒë·ªô n√†y ph·∫£i bao tr·ªçn ch·ªØ k√Ω, kh√¥ng bao g·ªìm c√°c vƒÉn b·∫£n xung quanh.

Ch·ªâ tr·∫£ v·ªÅ m·ªôt ƒë·ªëi t∆∞·ª£ng JSON duy nh·∫•t v·ªõi c√°c kh√≥a sau:
1. "ho_ten_sinh_vien": H·ªç t√™n c·ªßa sinh vi√™n, kh√¥ng d·∫•u, kh√¥ng kho·∫£ng tr·∫Øng, v√≠ d·ª•: "Nguyen_Van_A".
2. "ten_quyet_dinh": T√™n ƒë·∫ßy ƒë·ªß c·ªßa quy·∫øt ƒë·ªãnh, kh√¥ng d·∫•u, kh√¥ng kho·∫£ng tr·∫Øng, v√≠ d·ª•: "QUYET_DINH_CHUYEN_NGANH_HOC".
3. "nguoi_ki": T√™n c·ªßa ng∆∞·ªùi k√Ω quy·∫øt ƒë·ªãnh, kh√¥ng d·∫•u, kh√¥ng kho·∫£ng tr·∫Øng, v√≠ d·ª•: "Tran_Van_B".
4. "cac_quyet_dinh": M·ªôt m·∫£ng c√°c chu·ªói, m·ªói chu·ªói l√† m·ªôt ƒëi·ªÅu, kho·∫£n ho·∫∑c quy·∫øt ƒë·ªãnh c·ª• th·ªÉ (v√≠ d·ª•: ["ƒêi·ªÅu 1: ...", "ƒêi·ªÅu 2: ..."]).
5. "mo_ta_chu_ki": M·ªôt chu·ªói m√¥ t·∫£ v·ªÅ ch·ªØ k√Ω, v√≠ d·ª•: "Ch·ªØ k√Ω n·∫±m b√™n ph·∫£i, d∆∞·ªõi t√™n Tr·∫ßn VƒÉn B, c√≥ n√©t m·ª±c m√†u xanh, kh√¥ng r√µ n·ªôi dung."
6. "toa_do_chu_ki": M·ªôt m·∫£ng 4 s·ªë nguy√™n [x_min, y_min, x_max, y_max] ƒë·∫°i di·ªán cho t·ªça ƒë·ªô c·ªßa ch·ªØ k√Ω.

V√≠ d·ª•:
{
  "ho_ten_sinh_vien": "Nguyen_Van_A",
  "ten_quyet_dinh": "QUYET_DINH_TOT_NGHIEP",
  "nguoi_ki": "Tran_Van_B",
  "cac_quyet_dinh": ["ƒêi·ªÅu 1: ...", "ƒêi·ªÅu 2: ..."],
  "mo_ta_chu_ki": "Ch·ªØ k√Ω n·∫±m b√™n ph·∫£i, d∆∞·ªõi t√™n Tr·∫ßn VƒÉn B, c√≥ n√©t m·ª±c m√†u xanh, kh√¥ng r√µ n·ªôi dung.",
  "toa_do_chu_ki": [850, 600, 1000, 750]
}"""

        response = model.generate_content([prompt, img])
        full_text = response.text.strip()

        match = re.search(r"\{.*\}", full_text, re.DOTALL)
        if match:
            json_string = match.group(0)
            return json_string
        else:
            raise ValueError("Ph·∫£n h·ªìi c·ªßa API kh√¥ng ch·ª©a ƒë·ªëi t∆∞·ª£ng JSON h·ª£p l·ªá.")

    except Exception as e:
        print(f"L·ªói khi x·ª≠ l√Ω ·∫£nh qua API: {e}")
        return None


def extract_signature(
    image_path, coords: Tuple[int, int, int, int], output_dir=SIGNATURES_DIR
) -> Optional[str]:
    """
    C·∫Øt ph·∫ßn ch·ªØ k√Ω t·ª´ ·∫£nh g·ªëc v√† l∆∞u v√†o th∆∞ m·ª•c.
    Tr·∫£ v·ªÅ ƒë∆∞·ªùng d·∫´n c·ªßa file ·∫£nh ch·ªØ k√Ω ƒë√£ l∆∞u.
    """
    try:
        image = Image.open(image_path)
        cropped_image = image.crop(coords)

        file_name = os.path.basename(image_path)
        output_path = os.path.join(
            output_dir, f"signature_{os.path.splitext(file_name)[0]}.png"
        )

        cropped_image.save(output_path)
        return output_path
    except Exception as e:
        print(f"L·ªói khi c·∫Øt ·∫£nh ch·ªØ k√Ω: {e}")
        return None


# --- L·ªöP GIAO DI·ªÜN ·ª®NG D·ª§NG ---
class App(customtkinter.CTk):
    def __init__(self):
        super().__init__()

        # C·∫•u h√¨nh c·ª≠a s·ªï ch√≠nh
        self.title("üìë Tr√¨nh tr√≠ch xu·∫•t & t√¨m ki·∫øm vƒÉn b·∫£n t·ª´ ·∫£nh")
        self.geometry("1200x800")
        customtkinter.set_appearance_mode("Dark")
        customtkinter.set_default_color_theme("green")

        # Kh·ªüi t·∫°o k·∫øt n·ªëi CSDL v√† ƒë·∫£m b·∫£o b·∫£ng t·ªìn t·∫°i
        self.conn = self.get_db_connection()
        if self.conn:
            self.create_documents_table()
        else:
            messagebox.showerror(
                "L·ªói kh·ªüi t·∫°o",
                "Kh√¥ng th·ªÉ k·∫øt n·ªëi CSDL khi kh·ªüi ƒë·ªông. ·ª®ng d·ª•ng s·∫Ω b·ªã h·∫°n ch·∫ø ch·ª©c nƒÉng.",
            )

        # --- CONTAINER CH√çNH CHO TO√ÄN B·ªò GIAO DI·ªÜN ---
        main_frame = customtkinter.CTkFrame(self, corner_radius=20, fg_color="#1a1a1a")
        main_frame.pack(pady=20, padx=20, fill="both", expand=True)
        main_frame.grid_columnconfigure(0, weight=1)
        main_frame.grid_columnconfigure(1, weight=1)
        main_frame.grid_rowconfigure(2, weight=1)

        # Ti√™u ƒë·ªÅ v√† ph·ª• ƒë·ªÅ
        title_label = customtkinter.CTkLabel(
            main_frame,
            text="TR√åNH TR√çCH XU·∫§T VƒÇN B·∫¢N V√Ä T√åM KI·∫æM",
            font=("Arial", 32, "bold"),
            text_color="#4CAF50",  # xanh l√° c√¢y
        )
        title_label.grid(row=0, column=0, columnspan=2, pady=(20, 5), sticky="n")

        subtitle_label = customtkinter.CTkLabel(
            main_frame,
            text="S·ª≠ d·ª•ng AI ƒë·ªÉ nh·∫≠n di·ªán v√† t√¨m ki·∫øm n·ªôi dung trong h√¨nh ·∫£nh",
            font=("Arial", 16),
            text_color="#a0a0a0",
        )
        subtitle_label.grid(row=1, column=0, columnspan=2, pady=(0, 20), sticky="n")

        # --- KHUNG B√äN TR√ÅI: NH·∫¨P LI·ªÜU & T√åM KI·∫æM ---
        left_frame = customtkinter.CTkFrame(main_frame, corner_radius=15)
        left_frame.grid(row=2, column=0, padx=15, pady=15, sticky="nsew")
        left_frame.grid_columnconfigure(0, weight=1)

        # Khung nh·ªè h∆°n cho ch·ª©c nƒÉng tr√≠ch xu·∫•t
        extraction_frame = customtkinter.CTkFrame(left_frame, corner_radius=10)
        extraction_frame.grid(row=0, column=0, padx=10, pady=10, sticky="ew")
        extraction_frame.grid_columnconfigure(1, weight=1)

        image_label = customtkinter.CTkLabel(
            extraction_frame, text="üñºÔ∏è ·∫¢nh c·∫ßn tr√≠ch xu·∫•t:", font=("Arial", 14, "bold")
        )
        image_label.grid(row=0, column=0, padx=15, pady=10, sticky="w")
        self.image_path_entry = customtkinter.CTkEntry(
            extraction_frame, placeholder_text="Ch∆∞a ch·ªçn file ·∫£nh..."
        )
        self.image_path_entry.grid(row=0, column=1, padx=10, pady=10, sticky="ew")
        browse_image_button = customtkinter.CTkButton(
            extraction_frame, text="Duy·ªát...", command=self.select_image_file, width=80
        )
        browse_image_button.grid(row=0, column=2, padx=15, pady=10)

        # N√∫t b·∫Øt ƒë·∫ßu v√† thanh ti·∫øn tr√¨nh
        self.start_button = customtkinter.CTkButton(
            left_frame,
            text="üöÄ B·∫ÆT ƒê·∫¶U TR√çCH XU·∫§T",
            font=("Arial", 18, "bold"),
            height=55,
            fg_color="#4CAF50",
            hover_color="#388E3C",
            command=self.start_processing_thread,
            corner_radius=12,
        )
        self.start_button.grid(row=1, column=0, padx=10, pady=(10, 5), sticky="ew")

        self.progress_bar = customtkinter.CTkProgressBar(
            left_frame, mode="indeterminate", height=10
        )
        self.progress_bar.grid(row=2, column=0, padx=10, pady=(0, 20), sticky="ew")
        self.progress_bar.stop()
        self.progress_bar.set(0)

        # Khung t√¨m ki·∫øm
        search_frame = customtkinter.CTkFrame(left_frame, corner_radius=10)
        search_frame.grid(row=3, column=0, padx=10, pady=10, sticky="ew")
        search_frame.grid_columnconfigure(0, weight=1)

        self.search_entry = customtkinter.CTkEntry(
            search_frame,
            placeholder_text="üîç Nh·∫≠p t·ª´ kh√≥a ƒë·ªÉ t√¨m ki·∫øm...",
            font=("Arial", 14),
        )
        self.search_entry.grid(row=0, column=0, padx=(15, 5), pady=15, sticky="ew")
        # G·∫Øn s·ª± ki·ªán nh·∫•n ph√≠m v√†o √¥ nh·∫≠p li·ªáu
        self.search_entry.bind("<KeyRelease>", self.dynamic_search_files)

        search_button = customtkinter.CTkButton(
            search_frame, text="T√¨m ki·∫øm", command=self.search_files, width=100
        )
        search_button.grid(row=0, column=1, padx=(5, 15), pady=15)

        # --- KHUNG B√äN PH·∫¢I: K·∫æT QU·∫¢ & N·ªòI DUNG ---
        right_frame = customtkinter.CTkFrame(main_frame, corner_radius=15)
        right_frame.grid(row=2, column=1, padx=15, pady=15, sticky="nsew")
        right_frame.grid_columnconfigure(0, weight=1)
        right_frame.grid_rowconfigure(1, weight=1)
        right_frame.grid_rowconfigure(3, weight=1)
        right_frame.grid_rowconfigure(5, weight=3)  # D√†nh th√™m kh√¥ng gian cho textbox

        # Danh s√°ch k·∫øt qu·∫£
        results_label = customtkinter.CTkLabel(
            right_frame, text="üìë K·∫æT QU·∫¢ T√åM KI·∫æM:", font=("Arial", 14, "bold")
        )
        results_label.grid(row=0, column=0, padx=10, pady=(10, 5), sticky="w")

        self.results_listbox_frame = customtkinter.CTkScrollableFrame(
            right_frame, corner_radius=10, fg_color="#2b2b2b"
        )
        self.results_listbox_frame.grid(row=1, column=0, padx=10, pady=0, sticky="nsew")
        self.results_listbox_frame.grid_columnconfigure(0, weight=1)
        self.result_labels: Dict[int, customtkinter.CTkLabel] = {}
        self.selected_item_id = None
        self.result_labels_data: Dict[int, Dict] = {}

        # Khung hi·ªÉn th·ªã ·∫£nh ch·ªØ k√Ω
        signature_label = customtkinter.CTkLabel(
            right_frame, text="‚úíÔ∏è ·∫¢NH CH·ªÆ K√ù:", font=("Arial", 14, "bold")
        )
        signature_label.grid(row=2, column=0, padx=10, pady=(15, 5), sticky="w")

        self.signature_image_label = customtkinter.CTkLabel(
            right_frame, text="", bg_color="transparent"
        )
        self.signature_image_label.grid(
            row=3, column=0, padx=10, pady=(0, 10), sticky="nsew"
        )

        # H·ªôp hi·ªÉn th·ªã n·ªôi dung
        content_label = customtkinter.CTkLabel(
            right_frame, text="üìù N·ªòI DUNG T√ÄI LI·ªÜU:", font=("Arial", 14, "bold")
        )
        content_label.grid(row=4, column=0, padx=10, pady=(15, 5), sticky="w")
        self.output_textbox = customtkinter.CTkTextbox(
            right_frame, font=("Consolas", 12), wrap="word"
        )
        self.output_textbox.grid(row=5, column=0, padx=10, pady=(0, 10), sticky="nsew")

        # Thanh tr·∫°ng th√°i
        self.status_label = customtkinter.CTkLabel(
            self,
            text="‚úÖ S·∫µn s√†ng",
            fg_color="transparent",
            anchor="w",
            font=("Arial", 12),
        )
        self.status_label.pack(side="bottom", fill="x", padx=40, pady=10)

        # T·∫£i danh s√°ch file ban ƒë·∫ßu t·ª´ DB
        if self.conn:
            self.load_initial_data()

    # --- C√°c h√†m x·ª≠ l√Ω ---
    def get_db_connection(self):
        """T·∫°o v√† tr·∫£ v·ªÅ k·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu."""
        try:
            conn = pyodbc.connect(CONNECTION_STRING)
            return conn
        except pyodbc.Error as e:
            sql_state = e.args[0]
            if sql_state == "28000":
                messagebox.showerror(
                    "L·ªói k·∫øt n·ªëi", "T√™n ng∆∞·ªùi d√πng ho·∫∑c m·∫≠t kh·∫©u SQL Server kh√¥ng ƒë√∫ng."
                )
            elif sql_state == "08001":
                messagebox.showerror(
                    "L·ªói k·∫øt n·ªëi",
                    "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn SQL Server. Vui l√≤ng ki·ªÉm tra ƒë·ªãa ch·ªâ m√°y ch·ªß.",
                )
            else:
                messagebox.showerror(
                    "L·ªói k·∫øt n·ªëi", f"ƒê√£ x·∫£y ra l·ªói khi k·∫øt n·ªëi SQL Server:\n{e}"
                )
            return None

    def create_documents_table(self):
        """T·∫°o b·∫£ng Documents n·∫øu n√≥ ch∆∞a t·ªìn t·∫°i (ƒê√£ c·∫≠p nh·∫≠t)."""
        create_table_query = """
        IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[Documents]') AND type in (N'U'))
        BEGIN
            CREATE TABLE [dbo].[Documents](
                [id] [int] IDENTITY(1,1) NOT NULL,
                [ho_ten_sinh_vien] [nvarchar](255) NULL,
                [ten_quyet_dinh] [nvarchar](255) NULL,
                [nguoi_ki] [nvarchar](255) NULL,
                [cac_quyet_dinh] [nvarchar](max) NULL,
                [mo_ta_chu_ki] [nvarchar](max) NULL,
                [duong_dan_chu_ki] [nvarchar](max) NULL,
            PRIMARY KEY CLUSTERED 
            (
                [id] ASC
            )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
            ) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
        END
        """
        try:
            cursor = self.conn.cursor()
            cursor.execute(create_table_query)
            self.conn.commit()
            print("ƒê√£ ki·ªÉm tra v√† t·∫°o b·∫£ng Documents (n·∫øu ch∆∞a t·ªìn t·∫°i).")
        except pyodbc.Error as e:
            messagebox.showerror("L·ªói CSDL", f"Kh√¥ng th·ªÉ t·∫°o b·∫£ng Documents. L·ªói: {e}")

    def select_image_file(self):
        file_path = filedialog.askopenfilename(
            title="Ch·ªçn file ·∫£nh scan",
            filetypes=[
                ("Image Files", "*.png *.jpg *.jpeg *.bmp"),
                ("All files", "*.*"),
            ],
        )
        if file_path:
            self.image_path_entry.delete(0, "end")
            self.image_path_entry.insert(0, file_path)
            self.status_label.configure(
                text=f"‚úÖ ƒê√£ ch·ªçn file: {os.path.basename(file_path)}"
            )

    def start_processing_thread(self):
        image_path = self.image_path_entry.get()

        if not image_path:
            messagebox.showerror("L·ªói", "Vui l√≤ng ch·ªçn m·ªôt file ·∫£nh.")
            return

        self.status_label.configure(text="‚è≥ ƒêang x·ª≠ l√Ω, vui l√≤ng ƒë·ª£i...")
        self.start_button.configure(state="disabled")
        self.progress_bar.start()

        def worker():
            result = get_image_data(image_path)
            if result:
                try:
                    data = json.loads(result)

                    ho_ten_sinh_vien = data.get("ho_ten_sinh_vien", "Kh√¥ng x√°c ƒë·ªãnh")
                    ten_quyet_dinh = data.get("ten_quyet_dinh", "Kh√¥ng x√°c ƒë·ªãnh")
                    nguoi_ki = data.get("nguoi_ki", "Kh√¥ng x√°c ƒë·ªãnh")
                    mo_ta_chu_ki = data.get("mo_ta_chu_ki", "Kh√¥ng c√≥ m√¥ t·∫£ ch·ªØ k√Ω")
                    cac_quyet_dinh_json = json.dumps(data.get("cac_quyet_dinh", []))

                    toa_do_chu_ki = data.get("toa_do_chu_ki")
                    duong_dan_chu_ki = None
                    if toa_do_chu_ki and len(toa_do_chu_ki) == 4:
                        duong_dan_chu_ki = extract_signature(
                            image_path, tuple(toa_do_chu_ki)
                        )

                    summary_content = (
                        f"H·ªç t√™n sinh vi√™n: {ho_ten_sinh_vien}\n"
                        f"T√™n quy·∫øt ƒë·ªãnh: {ten_quyet_dinh}\n"
                        f"Ng∆∞·ªùi k√Ω: {nguoi_ki}\n"
                        f"M√¥ t·∫£ ch·ªØ k√Ω: {mo_ta_chu_ki}\n"
                        f"ƒê∆∞·ªùng d·∫´n ·∫£nh ch·ªØ k√Ω: {duong_dan_chu_ki if duong_dan_chu_ki else 'Kh√¥ng t√¨m th·∫•y'}\n\n"
                        f"C√°c quy·∫øt ƒë·ªãnh:\n" + "\n".join(data.get("cac_quyet_dinh", []))
                    )

                    conn = self.get_db_connection()
                    if conn:
                        try:
                            cursor = conn.cursor()
                            insert_query = """
                                INSERT INTO Documents (ho_ten_sinh_vien, ten_quyet_dinh, nguoi_ki, cac_quyet_dinh, mo_ta_chu_ki, duong_dan_chu_ki)
                                VALUES (?, ?, ?, ?, ?, ?)
                            """
                            cursor.execute(
                                insert_query,
                                (
                                    ho_ten_sinh_vien,
                                    ten_quyet_dinh,
                                    nguoi_ki,
                                    cac_quyet_dinh_json,
                                    mo_ta_chu_ki,
                                    duong_dan_chu_ki,
                                ),
                            )
                            conn.commit()
                            self.after(
                                0,
                                lambda: self.finish_processing(
                                    "ƒê√£ l∆∞u v√†o CSDL", summary_content
                                ),
                            )
                        except pyodbc.Error as e:
                            self.after(
                                0,
                                lambda: self.handle_error(f"L·ªói khi l∆∞u v√†o CSDL: {e}"),
                            )
                        finally:
                            conn.close()
                    else:
                        self.after(
                            0,
                            lambda: self.handle_error(
                                "L·ªói: Kh√¥ng th·ªÉ k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu."
                            ),
                        )
                except json.JSONDecodeError as e:
                    self.after(
                        0,
                        lambda: self.handle_error(
                            f"L·ªói: Ph·∫£n h·ªìi API kh√¥ng ph·∫£i l√† JSON h·ª£p l·ªá. Chi ti·∫øt: {e}"
                        ),
                    )
            else:
                self.after(
                    0,
                    lambda: self.handle_error(
                        "L·ªói: Kh√¥ng th·ªÉ tr√≠ch xu·∫•t vƒÉn b·∫£n t·ª´ ·∫£nh. Ph·∫£n h·ªìi API kh√¥ng ch·ª©a JSON."
                    ),
                )

        threading.Thread(target=worker).start()

    def finish_processing(self, save_message, content):
        self.progress_bar.stop()
        self.output_textbox.delete("1.0", "end")
        self.output_textbox.insert("1.0", content)
        self.status_label.configure(text=f"‚úÖ Tr√≠ch xu·∫•t th√†nh c√¥ng! {save_message}")
        self.start_button.configure(state="normal")
        messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ tr√≠ch xu·∫•t v√† l∆∞u vƒÉn b·∫£n th√†nh c√¥ng!")
        self.load_initial_data()

    def handle_error(self, message):
        self.progress_bar.stop()
        self.status_label.configure(text=f"‚ùå {message}")
        self.start_button.configure(state="normal")
        messagebox.showerror("L·ªói", message)

    def load_initial_data(self):
        """T·∫£i to√†n b·ªô danh s√°ch c√°c file ƒë√£ l∆∞u trong CSDL."""
        for widget in self.results_listbox_frame.winfo_children():
            widget.destroy()

        try:
            cursor = self.conn.cursor()
            cursor.execute(
                "SELECT id, ten_quyet_dinh, ho_ten_sinh_vien FROM Documents ORDER BY id DESC"
            )
            rows = cursor.fetchall()
            row_count = 0
            for row in rows:
                doc_id, ten_quyet_dinh, ho_ten_sinh_vien = row
                display_name = f"{ten_quyet_dinh} - {ho_ten_sinh_vien} (ID: {doc_id})"

                label = customtkinter.CTkLabel(
                    self.results_listbox_frame,
                    text=display_name,
                    fg_color="#343638",
                    corner_radius=6,
                    pady=5,
                    anchor="w",
                    font=("Arial", 12),
                )
                label.bind(
                    "<Button-1>",
                    lambda event, doc_id=doc_id: self.show_file_content(doc_id),
                )
                label.pack(fill="x", padx=5, pady=2)
                row_count += 1

            self.status_label.configure(text=f"ƒê√£ t·∫£i {row_count} t√†i li·ªáu t·ª´ CSDL.")
        except pyodbc.Error as e:
            print(f"L·ªói khi t·∫£i d·ªØ li·ªáu t·ª´ CSDL: {e}")
            self.status_label.configure(text=f"‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu t·ª´ CSDL.")

    def dynamic_search_files(self, event=None):
        """L·ªçc danh s√°ch hi·ªÉn th·ªã khi ng∆∞·ªùi d√πng g√µ ph√≠m (ƒê√£ c·∫≠p nh·∫≠t)."""
        search_term = self.search_entry.get().strip().lower()

        for widget in self.results_listbox_frame.winfo_children():
            widget.destroy()

        found_files_count = 0

        try:
            cursor = self.conn.cursor()
            search_query = """
                SELECT id, ten_quyet_dinh, ho_ten_sinh_vien FROM Documents
                WHERE LOWER(ten_quyet_dinh) LIKE ? OR LOWER(ho_ten_sinh_vien) LIKE ? OR CAST(id AS NVARCHAR) LIKE ?
            """
            cursor.execute(
                search_query,
                (f"%{search_term}%", f"%{search_term}%", f"%{search_term}%"),
            )
            rows = cursor.fetchall()
            for row in rows:
                doc_id, ten_quyet_dinh, ho_ten_sinh_vien = row
                display_name = f"{ten_quyet_dinh} - {ho_ten_sinh_vien} (ID: {doc_id})"

                label = customtkinter.CTkLabel(
                    self.results_listbox_frame,
                    text=display_name,
                    fg_color="#343638",
                    corner_radius=6,
                    pady=5,
                    anchor="w",
                    font=("Arial", 12),
                )
                label.bind(
                    "<Button-1>",
                    lambda event, doc_id=doc_id: self.show_file_content(doc_id),
                )
                label.pack(fill="x", padx=5, pady=2)
                found_files_count += 1
            self.status_label.configure(
                text=f"‚úÖ T√¨m th·∫•y {found_files_count} k·∫øt qu·∫£."
            )
        except pyodbc.Error as e:
            print(f"L·ªói khi t√¨m ki·∫øm d·ªØ li·ªáu: {e}")
            self.status_label.configure(text=f"‚ùå L·ªói khi t√¨m ki·∫øm d·ªØ li·ªáu t·ª´ CSDL.")

    def search_files(self):
        self.dynamic_search_files()

    def show_file_content(self, doc_id):
        """Hi·ªÉn th·ªã n·ªôi dung c·ªßa t√†i li·ªáu v√† ·∫£nh ch·ªØ k√Ω (ƒê√£ c·∫≠p nh·∫≠t)."""
        self.output_textbox.delete("1.0", "end")
        self.signature_image_label.configure(image=None)  # X√≥a ·∫£nh c≈©
        self.signature_image_label.image = None
        self.signature_image_label.configure(text="Kh√¥ng c√≥ ·∫£nh ch·ªØ k√Ω")

        try:
            cursor = self.conn.cursor()
            query = "SELECT ho_ten_sinh_vien, ten_quyet_dinh, nguoi_ki, cac_quyet_dinh, mo_ta_chu_ki, duong_dan_chu_ki FROM Documents WHERE id = ?"
            cursor.execute(query, (doc_id,))
            row = cursor.fetchone()
            if row:
                (
                    ho_ten_sinh_vien,
                    ten_quyet_dinh,
                    nguoi_ki,
                    cac_quyet_dinh_json,
                    mo_ta_chu_ki,
                    duong_dan_chu_ki,
                ) = row
                cac_quyet_dinh = json.loads(cac_quyet_dinh_json)

                summary_content = (
                    f"H·ªç t√™n sinh vi√™n: {ho_ten_sinh_vien}\n"
                    f"T√™n quy·∫øt ƒë·ªãnh: {ten_quyet_dinh}\n"
                    f"Ng∆∞·ªùi k√Ω: {nguoi_ki}\n"
                    f"M√¥ t·∫£ ch·ªØ k√Ω: {mo_ta_chu_ki}\n\n"
                    f"C√°c quy·∫øt ƒë·ªãnh:\n" + "\n".join(cac_quyet_dinh)
                )

                self.output_textbox.insert("1.0", summary_content)

                # Hi·ªÉn th·ªã ·∫£nh ch·ªØ k√Ω
                if duong_dan_chu_ki and os.path.exists(duong_dan_chu_ki):
                    self.signature_image_label.configure(text="")  # X√≥a text n·∫øu c√≥ ·∫£nh
                    original_image = Image.open(duong_dan_chu_ki)
                    # Gi·∫£m k√≠ch th∆∞·ªõc ·∫£nh ƒë·ªÉ v·ª´a v·ªõi giao di·ªán
                    width, height = original_image.size
                    max_width = 300
                    max_height = 100
                    if width > max_width or height > max_height:
                        ratio = min(max_width / width, max_height / height)
                        new_size = (int(width * ratio), int(height * ratio))
                        resized_image = original_image.resize(new_size, Image.LANCZOS)
                        ctk_image = customtkinter.CTkImage(
                            light_image=resized_image,
                            dark_image=resized_image,
                            size=new_size,
                        )
                    else:
                        ctk_image = customtkinter.CTkImage(
                            light_image=original_image,
                            dark_image=original_image,
                            size=(width, height),
                        )

                    self.signature_image_label.configure(image=ctk_image)
                    self.signature_image_label.image = (
                        ctk_image  # Gi·ªØ tham chi·∫øu ƒë·ªÉ tr√°nh b·ªã Garbage Collection
                    )
                else:
                    self.signature_image_label.configure(text="Kh√¥ng c√≥ ·∫£nh ch·ªØ k√Ω")

            else:
                messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y t√†i li·ªáu trong CSDL.")
        except pyodbc.Error as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ ƒë·ªçc n·ªôi dung t√†i li·ªáu:\n{e}")
        except json.JSONDecodeError:
            messagebox.showerror(
                "L·ªói",
                "Kh√¥ng th·ªÉ ph√¢n t√≠ch d·ªØ li·ªáu 'cac_quyet_dinh'. D·ªØ li·ªáu c√≥ th·ªÉ b·ªã h·ªèng.",
            )


if __name__ == "__main__":
    app = App()
    app.mainloop()
