import customtkinter
from tkinter import filedialog, messagebox, Toplevel, Label
import google.generativeai as genai
from PIL import Image, ImageTk, ImageDraw
import os
import threading
import json
import re
import pyodbc
from typing import Optional, Tuple

# --- C·∫•u h√¨nh to√†n c·ª•c ---
API_KEY = "AIzaSyAYgvAsQCU2zmRGo4xTYz_-2rxSzlHDIF4"
SQL_SERVER = "WILLIAMS22-01\\DHV"
SQL_DATABASE = "TextExtractorDB"
SQL_USER = "Admin"
SQL_PASSWORD = "123456"

CONNECTION_STRING = (
    f"DRIVER={{ODBC Driver 17 for SQL Server}};"
    f"SERVER={SQL_SERVER};"
    f"DATABASE={SQL_DATABASE};"
    f"UID={SQL_USER};"
    f"PWD={SQL_PASSWORD};"
)

ORIGINAL_IMAGES_DIR = "originals"
if not os.path.exists(ORIGINAL_IMAGES_DIR):
    os.makedirs(ORIGINAL_IMAGES_DIR)


# --- H√†m x·ª≠ l√Ω API (ƒê√É S·ª¨A L·ªñI CH·ªÆ K√ù) ---
# --- H√†m x·ª≠ l√Ω API (ƒê√É S·ª¨A TRI·ªÜT ƒê·ªÇ L·ªñI PH·∫¢N H·ªíI) ---
def get_image_data(image_path: str) -> Tuple[Optional[str], Optional[str]]:
    try:
        if not API_KEY or "AIzaSy" not in API_KEY:
            raise ValueError("API Key kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i.")

        genai.configure(api_key=API_KEY)
        # ‚úÖ D√ôNG MODEL ·ªîN ƒê·ªäNH NH·∫§T HI·ªÜN T·∫†I
        model = genai.GenerativeModel("gemini-1.5-flash-latest")
        img = Image.open(image_path)

        original_file_path = os.path.join(
            ORIGINAL_IMAGES_DIR, os.path.basename(image_path)
        )
        img.save(original_file_path)

        # === PROMPT SI√äU R√ï R√ÄNG, B·∫ÆT BU·ªòC TR·∫¢ V·ªÄ JSON ===
        prompt = """B·∫°n l√† h·ªá th·ªëng AI tr√≠ch xu·∫•t th√¥ng tin vƒÉn b·∫£n h√†nh ch√≠nh.

H√£y ph√¢n t√≠ch ·∫£nh v√† tr·∫£ v·ªÅ DUY NH·∫§T m·ªôt kh·ªëi JSON v·ªõi c·∫•u tr√∫c sau:

{
  "ho_ten_sinh_vien": "chu·ªói",
  "ten_quyet_dinh": "chu·ªói",
  "nguoi_ki": "chu·ªói",
  "cac_quyet_dinh": ["m·∫£ng chu·ªói"],
  "toa_do_chu_ki": [x_min, y_min, x_max, y_max]
}

H∆Ø·ªöNG D·∫™N CHI TI·∫æT:
- "ho_ten_sinh_vien": H·ªç t√™n sinh vi√™n trong quy·∫øt ƒë·ªãnh.
- "ten_quyet_dinh": T√™n ƒë·∫ßy ƒë·ªß c·ªßa quy·∫øt ƒë·ªãnh (VD: "Quy·∫øt ƒë·ªãnh c√¥ng nh·∫≠n t·ªët nghi·ªáp...").
- "nguoi_ki": H·ªç t√™n ng∆∞·ªùi k√Ω (th∆∞·ªùng ·ªü cu·ªëi trang).
- "cac_quyet_dinh": M·∫£ng ch·ª©a t·ª´ng ƒëi·ªÅu/kho·∫£n ƒë∆∞·ª£c li·ªát k√™.
- "toa_do_chu_ki": M·∫£ng 4 S·ªê NGUY√äN [tr√°i, tr√™n, ph·∫£i, d∆∞·ªõi] bao quanh CH·ªÆ K√ù TH·∫¨T (kh√¥ng ph·∫£i t√™n ng∆∞·ªùi k√Ω). N·∫øu kh√¥ng th·∫•y ‚Üí [0,0,0,0].

QUY T·∫ÆC B·∫ÆT BU·ªòC:
1. LU√îN tr·∫£ v·ªÅ ƒë√∫ng ƒë·ªãnh d·∫°ng JSON nh∆∞ tr√™n.
2. KH√îNG TH√äM b·∫•t k·ª≥ k√Ω t·ª±, gi·∫£i th√≠ch, markdown hay ```json n√†o ngo√†i kh·ªëi JSON.
3. N·∫øu thi·∫øu th√¥ng tin ‚Üí ƒëi·ªÅn "Kh√¥ng x√°c ƒë·ªãnh".
4. "toa_do_chu_ki" PH·∫¢I l√† m·∫£ng 4 s·ªë nguy√™n. Kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ null, string hay object.

V√ç D·ª§ HO√ÄN H·∫¢O:
{
  "ho_ten_sinh_vien": "Nguy·ªÖn VƒÉn A",
  "ten_quyet_dinh": "Quy·∫øt ƒë·ªãnh c√¥ng nh·∫≠n t·ªët nghi·ªáp ƒë·∫°i h·ªçc",
  "nguoi_ki": "Hi·ªáu tr∆∞·ªüng Tr·∫ßn VƒÉn Minh",
  "cac_quyet_dinh": [
    "ƒêi·ªÅu 1: Sinh vi√™n ƒë·ªß ƒëi·ªÅu ki·ªán t·ªët nghi·ªáp.",
    "ƒêi·ªÅu 2: C·∫•p b·∫±ng k·ªπ s∆∞ ng√†nh C√¥ng ngh·ªá th√¥ng tin."
  ],
  "toa_do_chu_ki": [820, 580, 980, 720]
}"""

        response = model.generate_content([prompt, img], stream=False)
        full_text = response.text.strip()

        print("\n" + "="*60)
        print("[DEBUG] PH·∫¢N H·ªíI TH√î T·ª™ GEMINI:")
        print("-"*60)
        print(full_text)
        print("="*60 + "\n")

        # üîç R√∫t JSON b·∫±ng nhi·ªÅu l·ªõp b·∫£o v·ªá
        json_match = re.search(r"\{.*\}", full_text, re.DOTALL)
        if not json_match:
            print("[C·∫¢NH B√ÅO] Kh√¥ng t√¨m th·∫•y JSON trong ph·∫£n h·ªìi ‚Üí T·∫°o JSON m·∫∑c ƒë·ªãnh")
            fallback_data = {
                "ho_ten_sinh_vien": "Kh√¥ng x√°c ƒë·ªãnh",
                "ten_quyet_dinh": "Kh√¥ng x√°c ƒë·ªãnh",
                "nguoi_ki": "Kh√¥ng x√°c ƒë·ªãnh",
                "cac_quyet_dinh": [],
                "toa_do_chu_ki": [0, 0, 0, 0]
            }
            return json.dumps(fallback_data, ensure_ascii=False), original_file_path

        json_string = json_match.group(0)

        # ‚úÖ Ki·ªÉm tra & s·ª≠a l·ªói JSON tr∆∞·ªõc khi tr·∫£ v·ªÅ
        try:
            data = json.loads(json_string)
        except json.JSONDecodeError:
            print("[L·ªñI] JSON kh√¥ng h·ª£p l·ªá ‚Üí S·ª≠a ch·ªØa t·ª± ƒë·ªông")
            # T·∫°o l·∫°i JSON an to√†n
            data = {
                "ho_ten_sinh_vien": "Kh√¥ng x√°c ƒë·ªãnh",
                "ten_quyet_dinh": "Kh√¥ng x√°c ƒë·ªãnh",
                "nguoi_ki": "Kh√¥ng x√°c ƒë·ªãnh",
                "cac_quyet_dinh": [],
                "toa_do_chu_ki": [0, 0, 0, 0]
            }

        # ‚úÖ ƒê·∫£m b·∫£o kh√≥a "toa_do_chu_ki" lu√¥n t·ªìn t·∫°i & ƒë√∫ng ƒë·ªãnh d·∫°ng
        if "toa_do_chu_ki" not in data or not isinstance(data["toa_do_chu_ki"], list) or len(data["toa_do_chu_ki"]) != 4:
            data["toa_do_chu_ki"] = [0, 0, 0, 0]

        # Chuy·ªÉn v·ªÅ int
        try:
            data["toa_do_chu_ki"] = [int(x) for x in data["toa_do_chu_ki"]]
        except:
            data["toa_do_chu_ki"] = [0, 0, 0, 0]

        # Tr·∫£ v·ªÅ JSON string chu·∫©n
        return json.dumps(data, ensure_ascii=False), original_file_path

    except Exception as e:
        print(f"[L·ªñI N·∫∂NG] X·ª≠ l√Ω ·∫£nh th·∫•t b·∫°i: {e}")
        # Fallback cu·ªëi c√πng
        fallback_data = {
            "ho_ten_sinh_vien": "L·ªói x·ª≠ l√Ω",
            "ten_quyet_dinh": "L·ªói x·ª≠ l√Ω",
            "nguoi_ki": "L·ªói x·ª≠ l√Ω",
            "cac_quyet_dinh": ["Kh√¥ng tr√≠ch xu·∫•t ƒë∆∞·ª£c do l·ªói h·ªá th·ªëng"],
            "toa_do_chu_ki": [0, 0, 0, 0]
        }
        return json.dumps(fallback_data, ensure_ascii=False), None


# --- L·ªöP CH√çNH: GIAO DI·ªÜN DASHBOARD ƒê·∫∏P, S√ÅNG, 1 C·ª¨A S·ªî ---
class App(customtkinter.CTk):
    def __init__(self):
        super().__init__()

        # === C·∫§U H√åNH C·ª¨A S·ªî ===
        self.title("üìÑ AI Document Extractor & Searcher")
        self.geometry("1300x850")
        self.minsize(1200, 800)
        customtkinter.set_appearance_mode("Light")  # üåû CH·∫æ ƒê·ªò S√ÅNG
        customtkinter.set_default_color_theme("blue")

        # K·∫øt n·ªëi CSDL
        self.conn = self.get_db_connection()
        if self.conn:
            self.create_documents_table()
        else:
            messagebox.showerror(
                "L·ªói kh·ªüi t·∫°o",
                "Kh√¥ng th·ªÉ k·∫øt n·ªëi CSDL khi kh·ªüi ƒë·ªông. ·ª®ng d·ª•ng s·∫Ω b·ªã h·∫°n ch·∫ø ch·ª©c nƒÉng.",
            )

        # Bi·∫øn tr·∫°ng th√°i
        self.current_selected_doc_id = None

        # === HEADER ===
        header_frame = customtkinter.CTkFrame(self, height=80, corner_radius=0, fg_color="#f8f9fa", border_width=0)
        header_frame.pack(fill="x", pady=0, padx=0)
        header_frame.grid_columnconfigure(1, weight=1)

        title_label = customtkinter.CTkLabel(
            header_frame,
            text="üìë AI Document Dashboard",
            font=("Segoe UI", 28, "bold"),
            text_color="#2c3e50",
        )
        title_label.grid(row=0, column=0, padx=(40, 20), pady=20, sticky="w")

        subtitle_label = customtkinter.CTkLabel(
            header_frame,
            text="Tr√≠ch xu·∫•t th√¥ng minh & t√¨m ki·∫øm t√†i li·ªáu ·∫£nh b·∫±ng AI ‚Äî Giao di·ªán hi·ªán ƒë·∫°i, d·ªÖ s·ª≠ d·ª•ng",
            font=("Segoe UI", 13),
            text_color="#7f8c8d",
        )
        subtitle_label.grid(row=0, column=1, padx=10, pady=20, sticky="w")

        # === MAIN CONTENT FRAME ===
        main_frame = customtkinter.CTkFrame(self, fg_color="#ffffff", corner_radius=20)
        main_frame.pack(pady=25, padx=30, fill="both", expand=True)
        main_frame.grid_columnconfigure(0, weight=1, uniform="group1")
        main_frame.grid_columnconfigure(1, weight=2, uniform="group1")
        main_frame.grid_rowconfigure(1, weight=1)

        # --- TOP CONTROL CARD ---
        control_card = customtkinter.CTkFrame(main_frame, fg_color="#f8f9fa", corner_radius=15, border_width=2, border_color="#e0e0e0")
        control_card.grid(row=0, column=0, columnspan=2, padx=0, pady=(0, 20), sticky="ew")
        control_card.grid_columnconfigure(1, weight=1)

        # File selection
        row1 = customtkinter.CTkFrame(control_card, fg_color="transparent")
        row1.pack(fill="x", padx=30, pady=(25, 15))

        customtkinter.CTkLabel(
            row1, text="üìÅ ·∫¢nh c·∫ßn x·ª≠ l√Ω:", font=("Segoe UI", 15, "bold"), text_color="#2c3e50"
        ).pack(side="left")

        self.image_path_entry = customtkinter.CTkEntry(
            row1, placeholder_text="Ch∆∞a ch·ªçn file...", height=40, font=("Segoe UI", 13), width=500
        )
        self.image_path_entry.pack(side="left", padx=15, fill="x", expand=True)

        browse_btn = customtkinter.CTkButton(
            row1,
            text="Duy·ªát...",
            width=110,
            height=40,
            font=("Segoe UI", 13, "bold"),
            command=self.select_image_file,
            fg_color="#3498db",
            hover_color="#2980b9",
        )
        browse_btn.pack(side="left")

        # Process button + progress
        row2 = customtkinter.CTkFrame(control_card, fg_color="transparent")
        row2.pack(fill="x", padx=30, pady=(0, 25))

        self.start_button = customtkinter.CTkButton(
            row2,
            text="üöÄ B·∫ÆT ƒê·∫¶U TR√çCH XU·∫§T",
            font=("Segoe UI", 17, "bold"),
            height=55,
            fg_color="#27ae60",
            hover_color="#229954",
            command=self.start_processing_thread,
            corner_radius=12,
        )
        self.start_button.pack(side="left")

        self.progress_bar = customtkinter.CTkProgressBar(
            row2, mode="indeterminate", height=10, progress_color="#27ae60", width=300
        )
        self.progress_bar.pack(side="left", padx=(30, 0))
        self.progress_bar.stop()
        self.progress_bar.set(0)

        # --- LEFT PANEL: SEARCH & RESULTS ---
        left_panel = customtkinter.CTkFrame(main_frame, fg_color="#f8f9fa", corner_radius=15, border_width=2, border_color="#e0e0e0")
        left_panel.grid(row=1, column=0, padx=(0, 15), pady=0, sticky="nsew")
        left_panel.grid_columnconfigure(0, weight=1)
        left_panel.grid_rowconfigure(2, weight=1)

        # Search bar
        search_frame = customtkinter.CTkFrame(left_panel, fg_color="transparent", height=70)
        search_frame.grid(row=0, column=0, padx=20, pady=(20, 15), sticky="ew")
        search_frame.grid_columnconfigure(0, weight=1)

        customtkinter.CTkLabel(
            search_frame, text="üîç T√¨m ki·∫øm nhanh:", font=("Segoe UI", 15, "bold"), text_color="#2c3e50"
        ).grid(row=0, column=0, sticky="w", pady=(0, 5))

        self.search_entry = customtkinter.CTkEntry(
            search_frame,
            placeholder_text="Nh·∫≠p t√™n SV, Qƒê ho·∫∑c ID...",
            height=40,
            font=("Segoe UI", 13),
        )
        self.search_entry.grid(row=1, column=0, sticky="ew", padx=(0, 10))
        self.search_entry.bind("<KeyRelease>", self.dynamic_search_files)

        search_btn = customtkinter.CTkButton(
            search_frame,
            text="T√¨m",
            width=80,
            height=40,
            font=("Segoe UI", 13, "bold"),
            command=self.search_files,
            fg_color="#e67e22",
            hover_color="#d35400",
        )
        search_btn.grid(row=1, column=1)

        # Results list
        result_label = customtkinter.CTkLabel(
            left_panel,
            text="üìã T√†i li·ªáu ƒë√£ l∆∞u:",
            font=("Segoe UI", 16, "bold"),
            text_color="#2c3e50",
        )
        result_label.grid(row=1, column=0, padx=20, pady=(15, 10), sticky="w")

        self.results_listbox_frame = customtkinter.CTkScrollableFrame(
            left_panel,
            fg_color="#ffffff",
            scrollbar_button_color="#3498db",
            corner_radius=10,
            border_width=1,
            border_color="#e0e0e0",
        )
        self.results_listbox_frame.grid(row=2, column=0, padx=20, pady=(0, 25), sticky="nsew")

        # --- RIGHT PANEL: CONTENT & ACTIONS ---
        right_panel = customtkinter.CTkFrame(main_frame, fg_color="#f8f9fa", corner_radius=15, border_width=2, border_color="#e0e0e0")
        right_panel.grid(row=1, column=1, padx=(15, 0), pady=0, sticky="nsew")
        right_panel.grid_columnconfigure(0, weight=1)
        right_panel.grid_rowconfigure(2, weight=1)

        # Action button
        self.open_image_button = customtkinter.CTkButton(
            right_panel,
            text="üñºÔ∏è Xem ·∫£nh g·ªëc v·ªõi ch·ªØ k√Ω ƒë√£ nh·∫≠n d·∫°ng",
            font=("Segoe UI", 15, "bold"),
            height=45,
            state="disabled",
            command=self.show_original_image_window,
            fg_color="#9b59b6",
            hover_color="#8e44ad",
        )
        self.open_image_button.grid(row=0, column=0, padx=25, pady=(25, 20), sticky="ew")

        # Content display
        content_label = customtkinter.CTkLabel(
            right_panel,
            text="üìù N·ªôi dung t√†i li·ªáu ƒë√£ tr√≠ch xu·∫•t:",
            font=("Segoe UI", 16, "bold"),
            text_color="#2c3e50",
        )
        content_label.grid(row=1, column=0, padx=25, pady=(10, 10), sticky="w")

        self.output_textbox = customtkinter.CTkTextbox(
            right_panel,
            font=("Consolas", 13),
            wrap="word",
            fg_color="#ffffff",
            text_color="#2c3e50",
            corner_radius=10,
            border_width=1,
            border_color="#e0e0e0",
        )
        self.output_textbox.grid(row=2, column=0, padx=25, pady=(0, 25), sticky="nsew")

        # === STATUS BAR ===
        status_frame = customtkinter.CTkFrame(self, height=40, corner_radius=0, fg_color="#ecf0f1")
        status_frame.pack(side="bottom", fill="x", padx=0, pady=0)

        self.status_label = customtkinter.CTkLabel(
            status_frame,
            text="‚úÖ S·∫µn s√†ng | Phi√™n b·∫£n Light Dashboard 1.0",
            font=("Segoe UI", 12),
            text_color="#7f8c8d",
            anchor="w",
        )
        self.status_label.pack(side="left", padx=40, pady=8)

        # Load initial data
        if self.conn:
            self.load_initial_data()

    # --- C√°c h√†m x·ª≠ l√Ω (gi·ªØ nguy√™n logic, ch·ªâ s·ª≠a giao di·ªán n·∫øu c·∫ßn) ---
    def get_db_connection(self):
        try:
            conn = pyodbc.connect(CONNECTION_STRING)
            return conn
        except pyodbc.Error as e:
            sql_state = e.args[0]
            if sql_state == "28000":
                messagebox.showerror("L·ªói k·∫øt n·ªëi", "T√™n ng∆∞·ªùi d√πng ho·∫∑c m·∫≠t kh·∫©u SQL Server kh√¥ng ƒë√∫ng.")
            elif sql_state == "08001":
                messagebox.showerror("L·ªói k·∫øt n·ªëi", "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn SQL Server. Vui l√≤ng ki·ªÉm tra ƒë·ªãa ch·ªâ m√°y ch·ªß.")
            else:
                messagebox.showerror("L·ªói k·∫øt n·ªëi", f"ƒê√£ x·∫£y ra l·ªói khi k·∫øt n·ªëi SQL Server:\n{e}")
            return None

    def create_documents_table(self):
        create_table_query = """
        IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[Documents]') AND type in (N'U'))
        BEGIN
            CREATE TABLE [dbo].[Documents](
                [id] [int] IDENTITY(1,1) NOT NULL,
                [ho_ten_sinh_vien] [nvarchar](255) NULL,
                [ten_quyet_dinh] [nvarchar](255) NULL,
                [nguoi_ki] [nvarchar](255) NULL,
                [cac_quyet_dinh] [nvarchar](max) NULL,
                [duong_dan_anh_goc] [nvarchar](max) NULL, 
                [toa_do_chu_ki] [nvarchar](max) NULL, 
            PRIMARY KEY CLUSTERED 
            (
                [id] ASC
            )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
            ) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
        END
        """
        try:
            cursor = self.conn.cursor()
            cursor.execute(create_table_query)
            self.conn.commit()
            print("ƒê√£ ki·ªÉm tra v√† t·∫°o b·∫£ng Documents (n·∫øu ch∆∞a t·ªìn t·∫°i).")
        except pyodbc.Error as e:
            messagebox.showerror("L·ªói CSDL", f"Kh√¥ng th·ªÉ t·∫°o b·∫£ng Documents. L·ªói: {e}")

    def select_image_file(self):
        file_path = filedialog.askopenfilename(
            title="Ch·ªçn file ·∫£nh scan",
            filetypes=[
                ("Image Files", "*.png *.jpg *.jpeg *.bmp"),
                ("All files", "*.*"),
            ],
        )
        if file_path:
            self.image_path_entry.delete(0, "end")
            self.image_path_entry.insert(0, file_path)
            self.status_label.configure(text=f"‚úÖ ƒê√£ ch·ªçn: {os.path.basename(file_path)}")

    def start_processing_thread(self):
        image_path = self.image_path_entry.get()
        if not image_path:
            messagebox.showerror("L·ªói", "Vui l√≤ng ch·ªçn m·ªôt file ·∫£nh.")
            return

        self.status_label.configure(text="‚è≥ ƒêang x·ª≠ l√Ω b·∫±ng AI...")
        self.start_button.configure(state="disabled")
        self.progress_bar.start()

        def worker():
            result, original_file_path = get_image_data(image_path)
            if result:
                try:
                    data = json.loads(result)
                    ho_ten_sinh_vien = data.get("ho_ten_sinh_vien", "Kh√¥ng x√°c ƒë·ªãnh")
                    ten_quyet_dinh = data.get("ten_quyet_dinh", "Kh√¥ng x√°c ƒë·ªãnh")
                    nguoi_ki = data.get("nguoi_ki", "Kh√¥ng x√°c ƒë·ªãnh")
                    cac_quyet_dinh_json = json.dumps(data.get("cac_quyet_dinh", []))
                    toa_do_chu_ki = data.get("toa_do_chu_ki")
                    toa_do_chu_ki_json = json.dumps(toa_do_chu_ki) if toa_do_chu_ki else None

                    summary_content = (
                        f"üßë‚Äçüéì H·ªç t√™n sinh vi√™n: {ho_ten_sinh_vien}\n"
                        f"üìë T√™n quy·∫øt ƒë·ªãnh: {ten_quyet_dinh}\n"
                        f"‚úçÔ∏è Ng∆∞·ªùi k√Ω: {nguoi_ki}\n\n"
                        f"üìã Chi ti·∫øt c√°c ƒëi·ªÅu kho·∫£n:\n" + "\n".join(f"‚Ä¢ {qd}" for qd in data.get("cac_quyet_dinh", []))
                    )

                    conn = self.get_db_connection()
                    if conn:
                        try:
                            cursor = conn.cursor()
                            insert_query = """
                                INSERT INTO Documents (ho_ten_sinh_vien, ten_quyet_dinh, nguoi_ki, cac_quyet_dinh, duong_dan_anh_goc, toa_do_chu_ki)
                                VALUES (?, ?, ?, ?, ?, ?)
                            """
                            cursor.execute(
                                insert_query,
                                (
                                    ho_ten_sinh_vien,
                                    ten_quyet_dinh,
                                    nguoi_ki,
                                    cac_quyet_dinh_json,
                                    original_file_path,
                                    toa_do_chu_ki_json,
                                ),
                            )
                            conn.commit()
                            new_id = cursor.execute("SELECT @@IDENTITY").fetchval()
                            self.after(0, lambda: self.finish_processing(f"ƒê√£ l∆∞u v√†o CSDL (ID: {new_id})", summary_content))
                        except pyodbc.Error as e:
                            self.after(0, lambda: self.handle_error(f"L·ªói khi l∆∞u v√†o CSDL: {e}"))
                        finally:
                            conn.close()
                    else:
                        self.after(0, lambda: self.handle_error("L·ªói: Kh√¥ng th·ªÉ k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu."))
                except (json.JSONDecodeError, KeyError) as e:
                    self.after(0, lambda: self.handle_error(f"L·ªói JSON ho·∫∑c thi·∫øu kh√≥a: {e}"))
            else:
                self.after(0, lambda: self.handle_error("Kh√¥ng th·ªÉ tr√≠ch xu·∫•t vƒÉn b·∫£n. Ph·∫£n h·ªìi API kh√¥ng h·ª£p l·ªá."))

        threading.Thread(target=worker, daemon=True).start()

    def finish_processing(self, save_message, content):
        self.progress_bar.stop()
        self.output_textbox.delete("1.0", "end")
        self.output_textbox.insert("1.0", content)
        self.status_label.configure(text=f"‚úÖ Th√†nh c√¥ng! {save_message}")
        self.start_button.configure(state="normal")
        messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ tr√≠ch xu·∫•t v√† l∆∞u vƒÉn b·∫£n th√†nh c√¥ng!")
        self.load_initial_data()

    def handle_error(self, message):
        self.progress_bar.stop()
        self.status_label.configure(text=f"‚ùå {message}")
        self.start_button.configure(state="normal")
        messagebox.showerror("L·ªói", message)

    def load_initial_data(self):
        for widget in self.results_listbox_frame.winfo_children():
            widget.destroy()

        try:
            cursor = self.conn.cursor()
            cursor.execute("SELECT id, ten_quyet_dinh, ho_ten_sinh_vien FROM Documents ORDER BY id DESC")
            rows = cursor.fetchall()
            for row in rows:
                doc_id, ten_qd, ho_ten = row
                display_name = f"üìå {ten_qd}\nüë§ {ho_ten}  (ID: {doc_id})"

                item_frame = customtkinter.CTkFrame(
                    self.results_listbox_frame,
                    fg_color="#ffffff",
                    corner_radius=10,
                    border_width=1,
                    border_color="#e0e0e0",
                )
                item_frame.pack(fill="x", padx=5, pady=6)
                item_frame.grid_columnconfigure(0, weight=1)

                label = customtkinter.CTkLabel(
                    item_frame,
                    text=display_name,
                    font=("Segoe UI", 13),
                    justify="left",
                    anchor="w",
                    text_color="#2c3e50",
                )
                label.pack(fill="x", padx=15, pady=12)
                label.bind("<Button-1>", lambda event, did=doc_id: self.show_file_content(did))
                label.bind("<Enter>", lambda event, frame=item_frame: frame.configure(fg_color="#f0f0f0"))
                label.bind("<Leave>", lambda event, frame=item_frame: frame.configure(fg_color="#ffffff"))

            self.status_label.configure(text=f"‚úÖ ƒê√£ t·∫£i {len(rows)} t√†i li·ªáu.")
        except pyodbc.Error as e:
            print(f"L·ªói khi t·∫£i d·ªØ li·ªáu: {e}")
            self.status_label.configure(text="‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu t·ª´ CSDL.")

    def dynamic_search_files(self, event=None):
        search_term = self.search_entry.get().strip().lower()
        for widget in self.results_listbox_frame.winfo_children():
            widget.destroy()

        if not search_term:
            self.load_initial_data()
            return

        found_count = 0
        try:
            cursor = self.conn.cursor()
            cursor.execute("""
                SELECT id, ten_quyet_dinh, ho_ten_sinh_vien FROM Documents
                WHERE LOWER(ten_quyet_dinh) LIKE ? OR LOWER(ho_ten_sinh_vien) LIKE ? OR CAST(id AS NVARCHAR) LIKE ?
                ORDER BY id DESC
            """, (f"%{search_term}%", f"%{search_term}%", f"%{search_term}%"))

            rows = cursor.fetchall()
            for row in rows:
                doc_id, ten_qd, ho_ten = row
                display_name = f"üìå {ten_qd}\nüë§ {ho_ten}  (ID: {doc_id})"

                item_frame = customtkinter.CTkFrame(
                    self.results_listbox_frame,
                    fg_color="#ffffff",
                    corner_radius=10,
                    border_width=1,
                    border_color="#e0e0e0",
                )
                item_frame.pack(fill="x", padx=5, pady=6)
                item_frame.grid_columnconfigure(0, weight=1)

                label = customtkinter.CTkLabel(
                    item_frame,
                    text=display_name,
                    font=("Segoe UI", 13),
                    justify="left",
                    anchor="w",
                    text_color="#2c3e50",
                )
                label.pack(fill="x", padx=15, pady=12)
                label.bind("<Button-1>", lambda event, did=doc_id: self.show_file_content(did))
                label.bind("<Enter>", lambda event, frame=item_frame: frame.configure(fg_color="#f0f0f0"))
                label.bind("<Leave>", lambda event, frame=item_frame: frame.configure(fg_color="#ffffff"))

                found_count += 1

            self.status_label.configure(text=f"‚úÖ T√¨m th·∫•y {found_count} k·∫øt qu·∫£ cho '{search_term}'")
        except pyodbc.Error as e:
            print(f"L·ªói t√¨m ki·∫øm: {e}")
            self.status_label.configure(text="‚ùå L·ªói t√¨m ki·∫øm trong CSDL.")

    def search_files(self):
        self.dynamic_search_files()

    def show_file_content(self, doc_id):
        self.output_textbox.delete("1.0", "end")
        self.open_image_button.configure(state="disabled")
        self.current_selected_doc_id = None

        try:
            cursor = self.conn.cursor()
            cursor.execute("""
                SELECT ho_ten_sinh_vien, ten_quyet_dinh, nguoi_ki, cac_quyet_dinh, duong_dan_anh_goc, toa_do_chu_ki 
                FROM Documents WHERE id = ?
            """, (doc_id,))
            row = cursor.fetchone()

            if row:
                ho_ten_sinh_vien, ten_quyet_dinh, nguoi_ki, cac_quyet_dinh_json, duong_dan_anh_goc, toa_do_chu_ki_json = row
                cac_quyet_dinh = json.loads(cac_quyet_dinh_json)

                content = (
                    f"üßë‚Äçüéì H·ªç t√™n sinh vi√™n: {ho_ten_sinh_vien}\n"
                    f"üìë T√™n quy·∫øt ƒë·ªãnh: {ten_quyet_dinh}\n"
                    f"‚úçÔ∏è Ng∆∞·ªùi k√Ω: {nguoi_ki}\n\n"
                    f"üìã Chi ti·∫øt c√°c ƒëi·ªÅu kho·∫£n:\n" + "\n".join(f"‚Ä¢ {qd}" for qd in cac_quyet_dinh)
                )

                self.output_textbox.insert("1.0", content)
                self.current_selected_doc_id = doc_id
                self.open_image_button.configure(state="normal")
                self.status_label.configure(text=f"‚úÖ ƒêang xem t√†i li·ªáu ID: {doc_id}")
            else:
                messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y t√†i li·ªáu.")
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ ƒë·ªçc n·ªôi dung: {e}")

    def show_original_image_window(self):
        if not self.current_selected_doc_id:
            return

        try:
            cursor = self.conn.cursor()
            cursor.execute("SELECT duong_dan_anh_goc, toa_do_chu_ki FROM Documents WHERE id = ?", (self.current_selected_doc_id,))
            row = cursor.fetchone()

            if row:
                image_path, coords_json = row
                if not image_path or not os.path.exists(image_path):
                    messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y ·∫£nh g·ªëc.")
                    return

                img = Image.open(image_path)
                coords = json.loads(coords_json) if coords_json else []

                if len(coords) == 4 and all(isinstance(c, (int, float)) for c in coords) and sum(coords) > 0:
                    draw = ImageDraw.Draw(img)
                    draw.rectangle(coords, outline="#e74c3c", width=6)
                    draw.text((coords[0], coords[1]-25), "üìù Ch·ªØ k√Ω", fill="#e74c3c")

                # Resize ·∫£nh ƒë·ªÉ v·ª´a m√†n h√¨nh
                screen_width = self.winfo_screenwidth()
                screen_height = self.winfo_screenheight()
                img_width, img_height = img.size
                ratio = min(screen_width * 0.7 / img_width, screen_height * 0.7 / img_height)
                new_size = (int(img_width * ratio), int(img_height * ratio))
                img_resized = img.resize(new_size, Image.LANCZOS)

                top = Toplevel(self)
                top.title(f"üñºÔ∏è ·∫¢nh g·ªëc - ID: {self.current_selected_doc_id}")
                top.geometry(f"{new_size[0] + 60}x{new_size[1] + 120}")
                top.configure(bg="#f8f9fa")

                tk_img = ImageTk.PhotoImage(img_resized)
                lbl = Label(top, image=tk_img, bg="#ffffff", relief="solid", bd=1)
                lbl.image = tk_img
                lbl.pack(padx=30, pady=30)

                info_lbl = Label(
                    top,
                    text="üî¥ Khung ƒë·ªè: V·ªã tr√≠ ch·ªØ k√Ω ƒë√£ nh·∫≠n d·∫°ng",
                    bg="#f8f9fa",
                    fg="#e74c3c",
                    font=("Segoe UI", 11, "bold"),
                )
                info_lbl.pack(pady=(0, 15))

        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ hi·ªÉn th·ªã ·∫£nh: {e}")


if __name__ == "__main__":
    app = App()
    app.mainloop()
